@page "/GridPage"
@using EditGrid.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using System.Linq.Dynamic.Core
@using System.Net.Http
@using System.Net;
@using System.Net.Http.Headers
@inject IJSRuntime jsRuntime
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject FileStoreContext context

<h3>Editable File Grid</h3>

@if (filteredFiles != null && filteredFiles.Any())
{
    <table class="table table-bordered table-striped mb-0">
        <thead>
            <tr>
                <th @onclick="() => ApplySort(nameof(Files2.FileId))">File ID @SortIndicator(nameof(Files2.FileId))</th>
                <th @onclick="() => ApplySort(nameof(Files2.FileName))">File Name @SortIndicator(nameof(Files2.FileName))</th>
                <th @onclick="() => ApplySort(nameof(Files2.FileType))">File Type @SortIndicator(nameof(Files2.FileType))</th>
                <th @onclick="() => ApplySort(nameof(Files2.PersonName))">Person Name @SortIndicator(nameof(Files2.PersonName))</th>
                <th></th> <!-- for edit/save buttons -->
            </tr>
        </thead>
        <tbody>
            @foreach (var file in filteredFiles)
            {
                <tr>
                    <td>@file.FileId</td>
                    <td>
                        @if (file.IsEditing)
                        {
                            <input type="text" @bind="file.FileName" />
                        }
                        else
                        {
                            @file.FileName
                        }
                    </td>
                    <td>@file.FileType</td>
                    <td>
                        @if (file.IsEditing)
                        {
                            <input type="text" @bind="file.PersonName" />
                        }
                        else
                        {
                            @file.PersonName
                        }
                    </td>
                    <td>
                        @if (file.IsEditing)
                        {
                            <button class="btn btn-success" @onclick="() => Save(file)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => Cancel(file)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => Edit(file)">Edit</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    @if (totalRecords > pageSize)
    {
        <div class="mt-3">
            <button class="btn btn-primary" @onclick="PreviousPage" disabled="@isFirstPage">Previous</button>
            <span class="mx-2">Page @currentPage of @totalPages</span>
            <button class="btn btn-primary" @onclick="NextPage" disabled="@isLastPage">Next</button>
        </div>

    }
}
else
{
    <p><em>No files found on page {currentPage}.</em></p>
}

@code {
    private List<Files2> filteredFiles;
    private string currentSortColumn = nameof(Files2.FileId);
    private bool isSortAscending = true;
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalRecords;
    private int totalPages => (int)Math.Ceiling((double)totalRecords / pageSize);
    private bool isFirstPage => currentPage == 1;
    private bool isLastPage => currentPage == totalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadFiles();
    }

    private async Task LoadFiles()
    {

        var query = context.Files2s.AsNoTracking();
        var direction = isSortAscending ? "ascending" : "descending";
        query = query.OrderBy($"{currentSortColumn} {direction}");

        totalRecords = await query.CountAsync();
        Console.WriteLine($"Total records: {totalRecords}");

        filteredFiles = await query.Skip((currentPage - 1) * pageSize).Take(pageSize).ToListAsync();

        if (!filteredFiles.Any())
        {
            Console.WriteLine("No files found.");
        }
        else
        {
            Console.WriteLine($"Loaded {filteredFiles.Count} files for page {currentPage}.");
        }
        StateHasChanged();

    }


    private async Task ApplySort(string columnName)
    {
        if (currentSortColumn == columnName)
        {
            isSortAscending = !isSortAscending;
        }
        else
        {
            currentSortColumn = columnName;
            isSortAscending = true;
        }

        await LoadFiles();
    }

    private MarkupString SortIndicator(string columnName)
    {
        if (columnName != currentSortColumn)
        {
            return new MarkupString(string.Empty);
        }

        var arrow = isSortAscending ? "↑" : "↓";
        return new MarkupString($"&nbsp;{arrow}");
    }

    private async void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadFiles();
            StateHasChanged();
        }
    }

    private async void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadFiles();
        }
    }


    private async Task GoToPage(int newPage)
    {

        if (newPage != currentPage && newPage >= 1 && newPage <= totalPages)
        {
            currentPage = newPage;
            await LoadFiles();
        }
    }

    private void Edit(Files2 file)
    {
        file.IsEditing = true;
    }

    private void Cancel(Files2 file)
    {
        file.IsEditing = false;
    }

    private async Task Save(Files2 file)
    {
        file.IsEditing = false;
        await UpdateFile(file);
    }

    private async Task UpdateFile(Files2 file)
    {
        var fileToUpdate = await context.Files2s.FindAsync(file.FileId);
        if (fileToUpdate != null)
        {
            context.Entry(fileToUpdate).CurrentValues.SetValues(file);
            await context.SaveChangesAsync();
            await LoadFiles(); // Refresh the list after saving
        }
    }


}

